#LyX 1.5.4 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Cluster con acceso remoto
\end_layout

\begin_layout Standard
En esta sección mostraremos una implementación para un cluster de alto desempeño
 con acceso remoto, resultado del trabajo realizado en el marco del proyecto.
 
\end_layout

\begin_layout Standard
Describiremos las tecnologías elegidas para la implementación del DRM y
 despachador de trabajos resultado de la etapa de relevamiento de tecnologías,
 así como la interfaz para acceso remoto del cluster.
 
\end_layout

\begin_layout Subsection
Tecnologías elegidas
\end_layout

\begin_layout Standard
Luego de evaluar las diferentes posibilidades que brindan las tecnologías
 relevadas decidimos optar por implementar el cluster utilizando TORQUE
 como DRM y Maui como despachador, dejando abierta la posibilidad de anexar
 Gold para la contabilización de recursos.
 Luego de evaluar varios casos de estudio (ver sección 
\begin_inset LatexCommand vref
reference "sub:Torque-Casos-de-estudio"

\end_inset

) pudimos comprobar que TORQUE resulta muy adecuado para clusters de pequeño
 a mediano porte.
 Tanto TORQUE como Maui requieren pocos recursos de hardware para su ejecución,
 ventaja que resulta muy importante en un cluster de reducidas dimensiones
 como el que se desea utilizar.
\end_layout

\begin_layout Standard
TORQUE es un derivado de PBS (un DRM inicialmente desarrollado a mediados
 los años '90 para manejar recursos de computo aeroespacial en la NASA)
 por lo que cuenta con un código base muy estable y solido.
 Esto ayuda a mitigar los riesgos presentados por tecnologías emergentes
 que ofrecen funcionalidades innovadoras pero que también resultan problemáticas
 en un proyecto de corta duración.
 Otra ventaja que presenta TORQUE es su pequeño porte, resulta ser un producto
 relativamente pequeño facilitando su comprensión y por lo tanto su modificación
 y experimentación.
\end_layout

\begin_layout Standard
Si bien TORQUE brinda todas las funcionalidades necesarias para satisfacer
 los requerimientos del proyecto, también presenta ciertas carencias
\emph on
 
\emph default
dentro de las cuales las más importantes son CPU harvesting y la migración
 de procesos.
 Dichas carencias no son un problema serio ya que el cluster que se utilizará
 cuenta con nodos homogéneos y dedicados, esto significa que los nodos del
 cluster tendrán capacidades de procesamiento muy similares y no serán compartid
os con otras aplicaciones externas al cluster (p.
 ej.: aplicaciones de escritorio).
\end_layout

\begin_layout Subsection
Interfaz web desarrollada
\end_layout

\begin_layout Standard
Diseño e implementación de la solución 
\end_layout

\begin_layout Standard
Teniendo en cuenta los conocimientos previos de los integrantes del grupo,
 así como la curva de aprendizaje de las distintas herramientas para realizar
 aplicaciones web, decidimos utilizar PHP con Eclipse como IDE.
\end_layout

\begin_layout Standard
El motor de base de datos en principio podía ser MySql o PostgreSql y la
 decisión entre uno de los dos no la podíamos tomar hasta tiempo después
 de iniciada la etapa de implementación, por lo tanto se pensó desde un
 principio en un módulo de abstracción al motor de base de datos que ejecutara
 las operaciones básicas (abrir la conexión, ejecutar una consulta, obtener
 el resultado) e implementarlo tanto para mysql como para posgresql.
 Este requerimiento redundó en una ventaja para el producto: si fuera necesario
 instalarlo sobre otro motor de condiciones similares, en principio solo
 sería necesario reimplementar el módulo y repetir la etapa de testeo.
\end_layout

\begin_layout Standard
La apariencia del sitio también podía variar durante la implementación,
 por lo tanto además de separar la lógica de la aplicación de la capa de
 presentación, esta última se dividió en archivos .php que reciben los pedidos
 del usuario y actúan en consecuencia, separados de los archivos .html y
 .css orientados a la forma en que estos resultados se muestran.
 Para esto utilizamos plantillas que son cargadas en cada php para luego
 ser desplegadas en pantalla.
 En definitiva obtuvimos una versión moderada del patrón model view controller.
 Si en algún momento se deseara rediseñar el sitio manteniendo el funcionamiento
 del mismo, la mayor parte se puede cambiar desde estilos.css y el resto
 desde las plantillas en formato .html.
\end_layout

\begin_layout Paragraph*
\begin_inset Graphics
	filename diagrama.gif
	scale 25

\end_inset


\end_layout

\begin_layout Standard
El sitio permite un manejo de usuarios con perfiles diferenciados.
 Inicialmente podemos separar a los usuarios entre administradores y clientes
 finales, pero es posible ejercer diferencias más sutiles entre ellos.
 Para esto se diseñó un sistema de grupos de usuarios con funcionalidades
 asociadas, de esta manera podemos permitir a algunos usuarios acceder a
 algunas partes de la administración sin permitirles (por ejemplo) administrar
 los usuarios.
 En definitiva, cada usuario puede pertenecer a uno o más grupos, y estos
 a su vez pueden tener funcionalidades y trabajos asociados.
 Un usuario determinado puede hacer uso de una funcionaldiad dada si pertenece
 a algún grupo que se lo permita, mientras que puede acceder a un trabajo
 determinado si pertenece a algún grupo con acceso al mismo.
\end_layout

\begin_layout Standard
La interfaz de usuario varía notablemente según el perfil, si bien ambos
 usuarios tienen cierto conocimiento sobre el uso de aplicaciones, el cliente
 final no tiene por que estar interiorizado con el funcionamiento del cluster,
 por lo tanto se le intenta presentar el sistema como un todo.
 Por otro lado el administrador podrá desde su propia interfaz conocer el
 estado de los nodos del cluster e interactuar con ellos para solucionar
 posibles problemas o mejorar su performance.
\end_layout

\begin_layout Standard
El usuario administrador tendrá a su cargo la tarea de mantener los usuarios
 y grupos del sistema así como el acceso de los mismos a los distintos trabajos.
 Cada trabajo creado tendrá asociado un conjunto de recursos disponibles
 que determinarán el posterior funcionamiento de las ejecuciones de los
 clientes.
 Para esta implementación nos restringimos al uso de disco, tiempo máximo
 de ejecución y cantidad de nodos disponibles a la vez, pero es posible
 agregar recursos a restringir (memoria, ciclos de procesador, etc.).
\end_layout

\begin_layout Standard
El usuario final tendrá la posibilidad de subir su proyecto al cluster,
 compilarlo, ejecutarlo y ver la salida a pantalla en tiempo real.
 Dados los extensos tiempos de ejecución de los programas que se corren
 en clusters de estas características, el usuario puede abandonar el sitio
 para luego volver en otro momento.
 Si el programa sigue en ejecución puede ver la salida a pantalla (nuevamente
 en tiempo real) junto con las salidas anteriores de la misma ejecución.
 Para los trabajos terminados existe la posibilidad de ver la salida a pantalla
 o descargarla en un archivo.
\end_layout

\begin_layout Subsection
Testeo de la solución
\end_layout

\begin_layout Standard
Una de las actividades de este proceso fue el testeo de las tecnologías
 propuestas y el testeo de la interfaz web desarrollada.
 Los objetivos de esta etapa son la verificación y validación de los requerimien
tos funcionales establecidos en etapas mas tempranas y que fueran objetivos
 del proyecto.
\end_layout

\begin_layout Standard
Durante el proceso de testing se aplicaron dos tipos de test.
 Se realizó un test funcional apoyado o complementado con un test exploratorio.
 El testing funcional verifica el cumplimiento de los requerimientos funcionales
 contra los casos de test, en un entorno que emula un ambiente de producción
 del sistema.
 El objetivo de este test es verificar si el comportamiento observado del
 software a prueba coincide o no con sus especificaciones.
 
\end_layout

\begin_layout Standard
El test exploratorio es un proceso simultáneo de exploración y aprendizaje
 del producto, diseño y ejecución de pruebas.
 La estrategia en este caso fue recorrer las funcionalidades de la interfaz
 en busca de defectos de diseño, de programación, de funcionamiento, etc.
\end_layout

\begin_layout Standard
Durante el test exploratorio se generaron un serie de casos de test ques
 apuntan a cubrir los requerimientos funcionales principales del sistema.
 Estos casos de test se incluyeron en la Guía de Test (ver página 
\begin_inset LatexCommand pageref
reference "sub:Guía-de-testeo"

\end_inset

), pretendiendo guiar el testeo en posteriores ocasiones.
 El mismo incluye casos de test y escenarios de pruebas que integran los
 casos de test, así como una descripción del proceso ejecutado para esta
 oportunidad.
\end_layout

\begin_layout Standard
Las herramientas utilizadas en el testing fueron la guía de test y las funcional
idades provistas por el Google Code como son registro Issues y Wikis.
 
\begin_inset Note Note
status open

\begin_layout Standard
Es la primera vez que se menciona Google Code.
 Habría que explicar un poco mas que es y para que se usó.
 Capaz que estaría bueno mencionarlo antes porque se usó también para el
 desarrollo.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
