#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Fenton
\end_layout

\begin_layout Title
Manual de instalación
\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Paragraph

\size larger
\color red
/* Falta CRON CRON CRON CRON */
\end_layout

\begin_layout Section
Sistema operativo.
\end_layout

\begin_layout Standard
Se recomienda utilizar Linux 2.6 (o superior), con una arquitectura de 32-bits
 (x86) o 64-bits (x64).
 Si bien el sistema fué probado en SuSE, Ubuntu y Fedora, esto no quita
 que pueda realizarse una instalación en otras distribuciones (Debian, Slackware
, etc.) o hasta otro sistema operativo de la familia POSIX (FreeBSD, Solaris,
 etc).
\end_layout

\begin_layout Standard
Durante le resto del manual se asumirá que se utilizando Linux.
\end_layout

\begin_layout Section
Requerimientos de software.
\end_layout

\begin_layout Standard
A continuación detallaremos el software requerido por el sistema.
 Es recomendable realizar la instalación del software utilizando los paquetes
 de la distribución de linux utilizada (apt-get, yast2, etc.).
 A continuación veremos un breve instructivo de como realizar la instalación
 utilizando los fuentes.
\end_layout

\begin_layout Subsection
PostgreSQL 8.2.5 o superior [Requerido].
\end_layout

\begin_layout Standard
El sistema utiliza PostgreSQL para persistir la información sobre usuarios,
 trabajos, etc.
 La última versión se encuentra disponible para descargar en 
\begin_inset LatexCommand htmlurl
target "http://www.postgresql.org/"

\end_inset

.
 
\end_layout

\begin_layout Standard
Para compilar e instalar PostgreSQL en /usr/local/postgresql-8.2.5 se deben
 seguir los siguientes pasos:
\end_layout

\begin_layout Quote
$ ./configure --prefix=/usr/local/postgresql-8.2.5
\end_layout

\begin_layout Quote
$ make
\end_layout

\begin_layout Quote
root:# make install
\end_layout

\begin_layout Standard
Luego se debe crear el usuario de PostgreSQL y se debe asignar espacio fisico
 para los datos y logs.
\end_layout

\begin_layout Quote
root:# adduser postgres 
\end_layout

\begin_layout Quote
root:# mkdir /usr/local/postgresql-8.2.5/data 
\end_layout

\begin_layout Quote
root:# chown postgres /usr/local/postgresql-8.2.5/data 
\end_layout

\begin_layout Quote
postgres:$ /usr/local/postgresql-8.2.5/bin/initdb -D /usr/local/postgresql-8.2.5/dat
a 
\end_layout

\begin_layout Standard
Finalmente iniciamos el servicio:
\end_layout

\begin_layout Quote
postgres:$ /usr/local/postgresql-8.2.5/bin/pg_ctl -D /usr/local/postgresql-8.2.5/dat
a
\end_layout

\begin_layout Standard
La base de datos debe ser accesible desde todos los nodos del cluster (tanto
 el nodo maestro como los nodos de computo).
 Para habilitar el acceso desde otras IP's a la base de datos se debe editar
 /net/local/postgresql-8.2.5/data/pg_hba.conf y para habilitar la conexión
 TCP se debe editar /net/local/postgresql-8.2.5/data/postgresql.conf.
\end_layout

\begin_layout Subsection
Apache 2.0 o superior [Requerido].
\end_layout

\begin_layout Standard
Fenton utiliza un interfaz de usuario web para la ejecución de trabajos
 y la administración del cluster por lo que es necesario un servidor http.
 Apache puede obtenerse en 
\begin_inset LatexCommand htmlurl
target "http://httpd.apache.org/"

\end_inset

.
\end_layout

\begin_layout Standard
En la actualidad todas las distribuciones de Linux disponen de un paquete
 de Apache 2.
 Recomendamos utilizar este paquete para la instalación.
\end_layout

\begin_layout Subsection
PHP 5.2.5 o superior [Requerido].
\end_layout

\begin_layout Standard
Fenton se encuentra casi completamente implementando en PHP y requiere que
 este se encuentre instalado en todos los nodos del cluster.
 En el nodo maestro es utilizado para la ejecución de la interfaz web y
 la lógica del sistema, mientras que en los nodos de computo es utilizado
 para ejecutar scripts de pre-ejecucion y post-ejecución de trabajos en
 el cluster.
 PHP se encuentra disponible en 
\begin_inset LatexCommand htmlurl
target "http://www.php.net/"

\end_inset

.
 Al igual que para la instalación de Apache, es recomendable utilizar el
 paquete de PHP propio de la distribución de linux que se este usando.
 Para compilar e instalar PHP en el directorio /usr/local/php-5.2.5:
\end_layout

\begin_layout Quote
$ ./configure --prefix=/usr/local/php-5.2.5 --with-pgsql=/usr/local/postgresql-8.2.5
 --with-gd 
\end_layout

\begin_layout Quote
$ make 
\end_layout

\begin_layout Quote
root:# make install
\end_layout

\begin_layout Standard
Es necesario incluir soporte para PostgreSQL y para la biblioteca gráfica
 GD (utilizada por Ganglia).
 Luego de la instalación es necesario configurar el Apache para ejecutar
 archivos PHP.
\end_layout

\begin_layout Subsection
Ganglia 3.0.5 o superior [Requerido].
\end_layout

\begin_layout Standard
Ganglia es utilizado para monitorear el estado del cluster: carga de memoria
 de los nodos, tráfico de red, utilización de CPU, etc.
 La última versión se puede descargar desde 
\begin_inset LatexCommand htmlurl
target "http://ganglia.info/"

\end_inset

.
 Cuenta con tres componentes que deben ser instalados:
\end_layout

\begin_layout Itemize
gmond
\end_layout

\begin_deeper
\begin_layout Itemize
Este demonio se encarga de enviar información del estado del nodo al demonio
 gmetad.
 Debe correr en cada una de las maquina del cluster, por lo que debe existir
 una instancia del demonio por nodo del cluster.
\end_layout

\begin_deeper
\begin_layout Standard
Para compilar e instalar el gmond:
\end_layout

\begin_layout Quote
$ ./configure --prefix=/usr/local/ganglia-3.0.7
\end_layout

\begin_layout Quote
$ make
\end_layout

\begin_layout Quote
root:# make install
\end_layout

\begin_layout Standard
Dentro del directorio ganglia-3.0.7-src/gmond podremos encontrar algunos scripts
 de ejemplo para iniciar gmond al inicio del sistema.
 Es necesario configurar gmond, para esto creamos el archivo de configuracion
 /etc/gmond.conf con los valores por defecto ejecutando:
\end_layout

\begin_layout Quote
root:# /usr/local/ganglia-3.0.7/sbin/gmond --default_config > /etc/gmond.conf
\end_layout

\begin_layout Standard
Una vez creado con valores por defecto podemos configurarlo a gusto.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
gmetad
\end_layout

\begin_deeper
\begin_layout Itemize
Es un demonio que oficia de servidor, recolectando información de los nodos
 del cluster.
 Solamente una instancia de este demonio debe estar en ejecución.
\end_layout

\begin_deeper
\begin_layout Standard
Para compilar e instalar gmetad y gmond:
\end_layout

\begin_layout Quote
$ ./configure --prefix=/usr/local/ganglia-3.0.7 --with-gmetad 
\end_layout

\begin_deeper
\begin_layout Quote
(con la opcion --with-gmetad se genera gmond y gmetad al mismo tiempo)
\end_layout

\end_deeper
\begin_layout Quote
$ make
\end_layout

\begin_layout Quote
root:# make install
\end_layout

\begin_layout Standard
Dentro del directorio ganglia-3.0.7-src/gmetad podremos encontrar algunos
 scripts de ejemplo para iniciar gmetad al inicio del sistema.
 A diferencia de gmond, gmetad viene además con un archivo de configuración
 por defecto (ganglia-3.0.7-src/gmetad/gmetad.conf) que debemos copiar a /etc/gmeta
d.conf y luego editar.
\end_layout

\begin_layout Standard
Finalmente debemos crear el espacio en disco en donde gmetad guardará la
 información que recopile.
 Por defecto es en /var/lib/ganglia/rrds y su owner debe ser el usuario
 que fué configurado en gmetad.conf como usuario de ejecución (por defecto
 el usuario 'nobody').
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Interfaz web
\end_layout

\begin_deeper
\begin_layout Itemize
Ganglia cuenta con una interfaz web implementada en PHP donde se presenta
 la información del cluster.
 La interfaz web de Ganglia debe estar alojada en el mismo nodo que ejecuta
 el demonio gmetad.
\end_layout

\begin_deeper
\begin_layout Standard
Para realizar la instalación solamente es necesario copiar el directorio
 ganglia-3.0.7-src/web al directorio DocumentRoot de su instalación de Apache,
 por ejemplo: /var/www/ganglia.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Torque 2.3.0 o superior [Requerido].
\end_layout

\begin_layout Standard
Torque es un DRM y es utilizado para proveer control sobre la ejecución
 de trabajos y sobre los nodos del cluster.
 Se encuentra disponible en: 
\begin_inset LatexCommand htmlurl
target "http://www.clusterresources.com/"

\end_inset

.
 Cuenta con dos componentes: un servidor que debe estar instalado en el
 nodo maestro del cluster y un demonio (MOM) que debe estar instalado en
 cada uno de los nodos de computo del cluster.
\end_layout

\begin_layout Paragraph
Instalación y configuración de Torque en el nodo maestro.
\end_layout

\begin_layout Standard
Para instalar el servidor de Torque en /usr/local/torque-2.3.0:
\end_layout

\begin_layout Quote
$ ./configure --prefix=/usr/local/torque-2.3.0 --enable-doc 
\end_layout

\begin_layout Quote
$ make 
\end_layout

\begin_layout Quote
root:# make install
\end_layout

\begin_layout Standard
Una vez que termina la instalación del servidor, es necesario configurar
 el demonio qserverd:
\end_layout

\begin_layout Quote
root:# export PATH=$PATH:/usr/local/torque-2.3.0/bin/:/usr/local/torque-2.3.0/sbin/
\end_layout

\begin_layout Quote
root:# torque.setup <torqueadmin>
\end_layout

\begin_layout Standard
Donde <torqueadmin> es el usuario que se desempeñará como administrador
 de Torque.
 Este script creará un entorno basico de trabajo.
 Finalmente se deben configurar los nodos de computo editando /var/spool/torque/
server_priv/nodes, p.
 ej.:
\end_layout

\begin_layout Quote
nodo001.fing.edu.uy
\end_layout

\begin_layout Quote
nodo002.fing.edu.uy
\end_layout

\begin_layout Quote
nodo003.fing.edu.uy
\end_layout

\begin_layout Standard
O mediante la interfaz de consola de torque:
\end_layout

\begin_layout Quote
$ qmgr
\end_layout

\begin_layout Quote
qmgr: create node nodo001.fing.edu.uy
\end_layout

\begin_layout Paragraph
Instalación y configuración de Torque en los nodos de computo (MOM).
\end_layout

\begin_layout Standard
Para crear los paquetes de instalación distribuibles se debe ejecutar:
\end_layout

\begin_layout Quote
$ make packages
\end_layout

\begin_layout Standard
Y luego en cada nodo de computo:
\end_layout

\begin_layout Quote
root:# ./torque-package-clients-linux-i686.sh --install 
\series bold
\color red
(./torque-package-mom-linux-i686.sh --install?)
\end_layout

\begin_layout Standard
El servidor MOM para cada nodo de computo debe ser configurado para confiar
 en el servidor maestro de Torque editando /var/spool/torque/mom_priv/config:
 $pbsserver <SERVIDOR>.
\end_layout

\begin_layout Paragraph
Ejecución de los demonios.
\end_layout

\begin_layout Standard
Es necesario que el servidor de Torque y los MOM se encuentren en ejecución
 permanente en el cluster.
 Para esto es recomendable que sean agregados como demonios en el sistema
 creando scripts de ejecución en /etc/init.d.
 Existen dos scritps que pueden tomarse de base: scripts/qserverd.example.sh
 y scripts/qnoded.example.sh.
\end_layout

\begin_layout Subsection
Maui 3.2.6p19 o superior [Requerido].
\end_layout

\begin_layout Standard
Maui es un scheduler de trabajos para clusters.
 Se encarga de tomar acciones sobre la cola de trabajos: que trabajo será
 el siguiente en ser ejecutado, que trabajo debe ser detenido, etc.
 Maui se encuentra disponible en: 
\begin_inset LatexCommand htmlurl
target "http://www.clusterresources.com/"

\end_inset

.
\end_layout

\begin_layout Paragraph
Compilación, instalación y configuración.
\end_layout

\begin_layout Standard
Existe un bug en el script de configuración e instalación de Maui por lo
 que recomendamos realizar la instalación en /usr/local/maui.
 Además es necesario ser el usuario de Linux que se desempeñará como administrad
or del scheduler.
 Este usuario debe ser también administrador de Torque, por lo que recomendamos
 utilizar el mismo usuario se asignó durante el paso anterior como administrador
 de Torque.
 Una vez con este usuario, se debe ejecutar:
\end_layout

\begin_layout Quote
<torqueadmin>:$ ./configure --prefix=/usr/local/maui --with-pbs (opcional:
 --with-gold)
\end_layout

\begin_layout Quote
<torqueadmin>:$ make 
\end_layout

\begin_layout Quote
root:# make install 
\end_layout

\begin_layout Standard
Es posible que ocurra un error durante la creación de directorios en la
 instalación.
 Si sucede esto es necesario crear los directorios: 'log', 'traces', 'stats',
 'spool' y 'tools' en el directorio de instalación manualmente y luego volver
 a ejecutar 'make install'.
 
\end_layout

\begin_layout Standard
Debemos asegurarnos que el usuario administrador de Maui tenga permisos
 de escritura sobre el directorio de instalación.
 Una posibilidad es asignarlo como owner:
\end_layout

\begin_layout Quote
root:# chown -R <torqueadmin> /usr/local/maui
\end_layout

\begin_layout Standard
Luego de finalizada la instalación es necesario configurar el scheduler
 editando /usr/local/maui/maui.cfg:
\end_layout

\begin_layout Quote
RMCFG[MARGA] TYPE=PBS
\end_layout

\begin_layout Quote
RMPOLLINTERVAL 00:00:05
\end_layout

\begin_deeper
\begin_layout Quote
Para clusters pequeños quizas sea recomendable disminuir el un tiempo de
 pooling para tener una respuesta mas rápida del scheduler.
\end_layout

\end_deeper
\begin_layout Paragraph
Ejecución del demonio.
\end_layout

\begin_layout Standard
Al igual que Torque, también es necesario que Maui se encuentre todo en
 el tiempo en ejecución en el cluster.
 También existe un script que puede tomarse de ejemplo en scripts/maui.example.sh.
\end_layout

\begin_layout Subsection
Open MPI 1.2.6 o superior [Opcional] [Recomendado].
\end_layout

\begin_layout Standard
Open MPI es una implementación del estandar MPI-2.
 Se encuentra disponible en 
\begin_inset LatexCommand htmlurl
target "http://www.open-mpi.org/"

\end_inset

.
\end_layout

\begin_layout Quote
$ ./configure --prefix=/usr/local/openmpi-1.2.6 --enable-static --disable-shared
\end_layout

\begin_layout Quote
$ make
\end_layout

\begin_layout Quote
root:# make install
\end_layout

\begin_layout Standard
Al compilar OpenMPI de forma estatica evitamos problemas con bibliotecas
 en los diferentes nodos.
 Aunque tiene dos desventajas: los ejecutables terminan teniendo un mayor
 tamaño y si se actualizan las bibliotecas de OpenMPI es necesario re-compilar
 los proyectos compilados para utilizar la nueva versión.
\end_layout

\begin_layout Subsection
MPICH 1.2.7p1 o superior [Opcional].
\end_layout

\begin_layout Standard
MPICH v1 es una implementación del estandar MPI-1.
 Se encuentra disponible en 
\begin_inset LatexCommand htmlurl
target "http://www-unix.mcs.anl.gov/mpi/mpich1/"

\end_inset

.
 Para compilarlo e instalarlo en /usr/local/mpich-1.2.7p1:
\end_layout

\begin_layout Standard
$ ./configure --with-device=ch_p4 --prefix=/usr/local/mpich-1.2.7p1 --with-common-p
refix=/usr/local/mpich-1.2.7p1 
\end_layout

\begin_layout Standard
$ make 
\end_layout

\begin_layout Standard
root:# make install
\end_layout

\begin_layout Subsubsection
Mpiexec 0.83 o superior.
\end_layout

\begin_layout Standard
Mpiexec es un programa que reemplaza al script mpirun del paquete MPICH.
 Es utilizado para inicializar un trabajo paralelo desde Torque.
 Si bien no es obligatorio utilizar Mpiexec con MPICH, existen varias razones
 por las que es recomendable utilizarlo.
 La última versión se encuentra disponible en 
\begin_inset LatexCommand htmlurl
target "http://www.osc.edu/~pw/mpiexec/index.php"

\end_inset

.
 Para compilarlo e instalarlo en /usr/local/mpiexec:
\end_layout

\begin_layout Standard
$ ./configure --prefix=/usr/local/mpiexec-0.83 --with-default-comm=mpich-p4
 --with-pbs=/usr/local/torque --with-mpicc=/usr/local/mpich-1.2.7p1/bin/mpicc
 
\end_layout

\begin_layout Standard
$ make 
\end_layout

\begin_layout Standard
root:# make install
\end_layout

\begin_layout Section
Instalación de Fenton.
\end_layout

\begin_layout Subsection
Seguridad del sistema.
\end_layout

\begin_layout Paragraph
Usuario y grupo del sistema.
\end_layout

\begin_layout Standard
El sistema necesita contar con un usuario y un grupo para ejecutar.
 Por defecto este usuario y este grupo se llamaran fenton, para crearlos
 es debemos ejecutar:
\end_layout

\begin_layout Quote
root:# addgroup fenton
\end_layout

\begin_layout Quote
root:# adduser --ingroup fenton fenton
\end_layout

\begin_layout Paragraph
Repositorio del sistema.
\end_layout

\begin_layout Standard
Debemos crear el repositorio raiz donde el sistema creará la estructura
 de trabajos y clientes para que los usuarios realicen ejecuciones y almacenen
 sus resultados.
 Por ejemplo, creamos el repositorio en /home/fenton/repositorio y luego
 le asignamos los permisos adecuados.
\end_layout

\begin_layout Quote
fenton:$ mkdir -p /home/fenton/repositorio
\end_layout

\begin_layout Quote
fenton:$ chmod g+w+r /home/fenton/repositorio
\end_layout

\begin_deeper
\begin_layout Standard
El grupo del directorio del repositorio debe ser fenton.
 En caso contrario debemos cambiarlo con el comando:
\end_layout

\begin_layout Quote
root:# chgrp fenton /home/fenton/repositorio
\end_layout

\end_deeper
\begin_layout Standard
Finalmente debemos crear un espacio para el repositorio interno del sistema.
 Aqui el sistema almacenará logs de ejecuciones y otros datos que no estarán
 directamente disponibles al los usuarios.
 La ubicación recomendada para el directorio es /home/fenton/repositorio/sistema.
\end_layout

\begin_layout Quote
fenton:$ mkdir -p /home/fenton/repositorio/sistema
\end_layout

\begin_layout Quote
fenton:$ chmod g+w+r /home/fenton/repositorio/sistema
\end_layout

\begin_deeper
\begin_layout Standard
Al igual que en el directorio anterior, debemos segurarnos que el grupo
 del directorio sea fenton.
\end_layout

\end_deeper
\begin_layout Standard
El usuario y el grupo fenton deben existir en todos los nodos del cluster.
 Y ambos directorios también deben ser accesibles desde cualquier nodo del
 cluster.
\end_layout

\begin_layout Paragraph
Acceso SSH con autenticación RSA.
\end_layout

\begin_layout Standard
En el nodo de ejecución de la aplicación web debe ser posible realizar un
 SSH sin password desde el usuario que ejecuta la aplicación web (el usuario
 configurado en el servidor Apache) al usuario fenton en el nodo maestro.
 
\end_layout

\begin_layout Standard
El primer paso para esto es averiguar el usuario de ejecución configurado
 en el Apache.
 Este usuario varía de distribución en distribución.
 En nuestro sistema es www-data y está configurado en /etc/apache2/apache2.conf.
\end_layout

\begin_layout Standard
Luego debemos asignar a este usuario un directorio home.
 Para esto es necesario editar /etc/passwd:
\end_layout

\begin_layout Quote
www-data:x:33:33:www-data:/home/www-data:/bin/sh
\end_layout

\begin_layout Standard
De esta manera asignamos como home del usuario /home/www-data.
 Seguramente este directorio no exista, por lo que deberemos crearlo y asignarle
 como owner www-data.
\end_layout

\begin_layout Standard
A continuación creamos la clave publica y la privada necesarias para la
 autenticación:
\end_layout

\begin_layout Quote
root:# su - www-data
\end_layout

\begin_layout Quote
www-data:$ ssh-keygen -t dsa
\end_layout

\begin_layout Standard
Finalmente debemos agregar a las claves publicas del usuario fenton la recien
 creada clave de www-data.
\end_layout

\begin_layout Quote
fenton:$ mkdir -p /home/fenton/.ssh
\end_layout

\begin_layout Quote
root:# cat /home/www-data/.ssh/id_dsa.pub >> /home/fenton/.ssh/authorized_keys2
\end_layout

\begin_layout Quote
root:# chown fenton.fenton /home/fenton/.ssh/authorized_keys2
\end_layout

\begin_layout Standard
Es necesario probar al menos una vez el acceso SSH al nodo maestro para
 agregar el nodo maestro a los hosts conocidos de SSH.
 Suponiendo que el servidor apache se encuentra en el nodo maestro ejecutamos:
\end_layout

\begin_layout Quote
www-data:$ ssh fenton@localhost
\end_layout

\begin_layout Subsection
Base de datos.
\end_layout

\begin_layout Standard
Es necesario crear un usuario para el sistema en la base de datos, asignarle
 una contraseña y crear las tablas de datos.
 A continuación detallaremos como crear todo esto desde la linea de comando.
 Como primer paso debemos crear el usuario de la base de datos.
\end_layout

\begin_layout Quote
root:# su - postgres 
\end_layout

\begin_layout Quote
postgres:$ createuser fentondb 
\end_layout

\begin_layout Standard
Luego creamos el esquema de datos y las tablas.
\end_layout

\begin_layout Quote
$ createdb fentondb 
\end_layout

\begin_layout Quote
$ psql fentondb
\end_layout

\begin_layout Quote
psql=# 
\backslash
i postgres/database.sql
\end_layout

\begin_layout Standard
Finalmente asignamos una contraseña al nuevo usuario
\end_layout

\begin_layout Quote
psql=# alter user fentondb password 'fentondb'
\end_layout

\begin_layout Subsection
Aplicación web.
\end_layout

\begin_layout Standard
Para instalar la aplicación web simplemente debemos copiar el directorio
 web/ a la ubicación deseada.
 Por ejemplo /home/fenton/web, y luego crear un alias para la aplicación.
 En la mayoría de los casos basta con copiar el archivo apache/fenton.conf
 a /etc/apache2/conf.d.
\end_layout

\begin_layout Standard
La aplicación web debe ser accesible desde cualquier nodo del cluster.
 Esto es necesario debido a que los scripts de prologo y epilogo (ver siguiente
 paso) requieren ejecutar scripts de la aplicación.
\end_layout

\begin_layout Paragraph

\size larger
\color red
/* Falta CRON CRON CRON CRON */
\end_layout

\begin_layout Subsection
Configuración de Torque y Maui.
\end_layout

\begin_layout Standard
Lo primero que debemos hacer es agregar al usuario fenton a la lista de
 managers y operators del sistema.
 Para eso ejecutamos:
\end_layout

\begin_layout Quote
<torqueadmin>:$ /usr/local/torque-2.3.0/bin/qmgr
\end_layout

\begin_layout Quote
qmgr: set server managers += fenton@server.fing.edu.uy
\end_layout

\begin_layout Quote
qmgr: set server operators += fenton@server.fing.edu.uy
\end_layout

\begin_layout Standard
Podemos verificar la configuración mediante:
\end_layout

\begin_layout Quote
qmgr: list server managers
\end_layout

\begin_layout Quote
Server server.fing.edu.uy 
\end_layout

\begin_deeper
\begin_layout Quote
managers = fenton@server.fing.edu.uy,<torqueadmin>@server.fing.edu.uy 
\end_layout

\end_deeper
\begin_layout Quote
qmgr: list server operators
\end_layout

\begin_layout Quote
Server server.fing.edu.uy 
\end_layout

\begin_deeper
\begin_layout Quote
operators = fenton@server.fing.edu.uy,<torqueadmin>@server.fing.edu.uy 
\end_layout

\end_deeper
\begin_layout Standard
Una vez configurado el usuario 'fenton' como administrador de Torque, debemos
 configurarlo también como administrador de Maui.
 Para esto editamos el archivo de configuración /usr/local/maui/maui.cfg
 y editamos la configuración ADMIN1 de la siguiente manera:
\end_layout

\begin_layout Quote
ADMIN1 fenton
\end_layout

\begin_layout Standard
Como último paso debemos editar y copiar los scripts de pre-ejecución (prologo)
 y post-ejecución (epilogo).
 Estos scripts se encargan de notificar al sistema cuando algún nodo del
 cluster comienza o termina con la ejecución de un trabajo.
 Por esta razón estos scripts deben estar disponibles en todos los nodos
 del cluster (tanto el maestro como los nodos de cómputo).
 
\end_layout

\begin_layout Standard
Se deben copiar torque/prologue y torque/epilogue a /var/spool/torque/mom_priv
 y luego editar estos scripts configurando la variable PATH_PHP según nuestra
 instalación de la aplicación web, p.
 ej.: /home/fenton/web/bin.
\end_layout

\begin_layout Subsection
Configuración final del sistema.
\end_layout

\begin_layout Standard
Como último paso, debemos realizar los ajustes finales y configurar la aplicació
n web con la ubicación de los diferentes componentes del sistema.
 Para esto debemos editar el archivo de configuración /home/fenton/web/lib/Const
antes.php.
\end_layout

\begin_layout Standard
Si toda la instalación se realizó utilizando las ubicaciones sugeridas las
 modificaciones al archivo de configuración deberían ser minimas.
\end_layout

\begin_layout Itemize
Configuración de la ubicación del repositorio y archivos temporales.
\end_layout

\begin_deeper
\begin_layout Itemize
define("RAIZ", "/home/fenton/repositorio");
\end_layout

\begin_layout Itemize
define("RAIZ_SISTEMA", "/home/fenton/repositorio/sistema");
\end_layout

\begin_layout Itemize
define("TMP", "/tmp");
\end_layout

\end_deeper
\begin_layout Itemize
Configuración de la conexión a la base de datos.
\end_layout

\begin_deeper
\begin_layout Itemize
define("CONEXION_HOST", "localhost");
\end_layout

\begin_layout Itemize
define("CONEXION_PORT", "5432");
\end_layout

\begin_layout Itemize
define("CONEXION_USUARIO", "fentondb");
\end_layout

\begin_layout Itemize
define("CONEXION_PASSWORD", "fentondb");
\end_layout

\begin_layout Itemize
define("CONEXION_BASE", "fentondb");
\end_layout

\end_deeper
\begin_layout Itemize
Configuración del launcher MPI.
\end_layout

\begin_deeper
\begin_layout Itemize
define("MPIEXEC", "/usr/local/openmpi-1.2.6/bin/mpiexec");
\end_layout

\end_deeper
\begin_layout Itemize
URL de la instalación de Ganglia.
\end_layout

\begin_deeper
\begin_layout Itemize
define("GANGLIA_URL","http://localhost/ganglia");
\end_layout

\end_deeper
\begin_layout Itemize
Configuración del usuario y el host utilizado por el sistema para ejecutar
 tareas internas.
\end_layout

\begin_deeper
\begin_layout Itemize
define("SSH","/usr/bin/ssh"); 
\end_layout

\begin_layout Itemize
define("USERNAME","fenton"); 
\end_layout

\begin_layout Itemize
define("HOST","localhost");
\end_layout

\end_deeper
\begin_layout Itemize
Opciones generales del sistema.
\end_layout

\begin_deeper
\begin_layout Itemize
define("GRUPOFENTON","fenton");
\end_layout

\begin_deeper
\begin_layout Itemize
Grupo al que pertenecen todos los usuarios del sistema.
\end_layout

\end_deeper
\begin_layout Itemize
define("REDIRECCION_SALIDA", "/home/fenton/web/bin/redireccion_salida.php");
\end_layout

\begin_layout Itemize
define("OUTPUT", "salida_extra");
\end_layout

\begin_layout Itemize
define("EJECUTABLE","plantillas/archivos/qsub.script");
\end_layout

\begin_layout Itemize
define("LOG_EJECUCIONES","../log/ejecuciones.log");
\end_layout

\begin_layout Itemize
define("TIEMPO_REFRESH_RESULTADOS","5");
\end_layout

\begin_layout Itemize
define("COMANDOS_EJECUCION","make=make&mpicc=/usr/local/openmpi-1.2.6/bin/mpicc");
\end_layout

\begin_deeper
\begin_layout Itemize
Lista de comandos disponibles para la ejecución por parte del usuario del
 sistema.
 Deben estar separados entre ellos por un '&', y cada uno esta compuesto
 de dos partes separadas por un '=': la primer parte es la descripción y
 la segunda parte es ubicación del comando.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Configuración de Torque y Maui.
\end_layout

\begin_deeper
\begin_layout Itemize
define("PATH_TORQUE","/usr/local/torque-2.3.0"); 
\end_layout

\begin_layout Itemize
define("PATH_MAUI","/usr/local/maui");
\end_layout

\begin_layout Itemize
define("QSUB", PATH_TORQUE."/bin/qsub");
\end_layout

\begin_layout Itemize
etc...
\end_layout

\end_deeper
\begin_layout Standard
Algunas de las opciones que seguramente siempre debamos configurar son:
\end_layout

\begin_layout Itemize
define("CONEXION_HOST", "servidor.fing.edu.uy");
\end_layout

\begin_deeper
\begin_layout Itemize
Ubicación del host ejecutando la base de datos.
\end_layout

\end_deeper
\begin_layout Itemize
define("GANGLIA_URL","http://servidor.fing.edu.uy/ganglia");
\end_layout

\begin_deeper
\begin_layout Itemize
URL base de la instalación de Ganglia.
\end_layout

\end_body
\end_document
