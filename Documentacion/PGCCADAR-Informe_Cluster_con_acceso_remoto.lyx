#LyX 1.5.5 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Cluster con acceso remoto
\end_layout

\begin_layout Standard
El principal objetivo del proyecto es la contrucción de un cluster con acceso
 remoto.
 En esta sección se describirá el sistema Fenton, la solución propuesta
 por el equipo para cumplir con tal objetivo.
 Se profundizará en las tecnologías elegidas de la etapa de relevamiento
 e investigación (ver sección 
\begin_inset LatexCommand vref
reference "sec:Relevamiento-de-tecnologías"

\end_inset

) para la implementación del gestionamiento de recursos (DRM) y el despacho
 de trabajos.
 Se detallará la construcción de la interfaz para acceso remoto al cluster
 y además se mencionarán las herramientas utilizadas para el desarrollo
 y la documentación a lo largo del proyecto.
 Algo relevante de mencionar es que durante todo el proceso de desarrollo
 del sistema se  utilizaron exclusivamente herramientas de código libre
 (OSS).
 
\end_layout

\begin_layout Subsection
DRM y despachador de trabajos
\end_layout

\begin_layout Standard
A continuación se presentán y justificarán las tecnologías seleccionadas
 para la implementación del DRM y despachador de trabajos del sistema Fenton.
 La etapa de relavamiento de tecnologías fue una de las más importantes
 del proyecto, y creemos que en la implementación del gestionador de recursos
 y el planificador de trabajos radica uno de los mayores riesgo para el
 proyecto.
 Por esta razón para la construcción del sistema se seleccionaron herramientas
 con un buen rendimiento y estabilidad que brindarán una solida base sobre
 la cual construir el sistema.
 
\end_layout

\begin_layout Standard
Luego de evaluar diversas tecnologías actuales para la implementación de
 clusters se optó por utilizar TORQUE como DRM y Maui como despachador,
 dejando abierta la posibilidad de anexar Gold para la contabilización de
 recursos.
 Existen varios casos de estudio (ver sección 
\begin_inset LatexCommand vref
reference "sub:Torque-Casos-de-estudio"

\end_inset

) donde es posible comprobar que TORQUE resulta muy adecuado para la gestión
 de clusters de pequeño a mediano porte.
 Tanto TORQUE como Maui requieren pocos recursos de hardware para su ejecución,
 ventaja que resulta muy importante en un cluster de reducidas dimensiones
 como el que se desea utilizar.
\end_layout

\begin_layout Standard
TORQUE es un derivado de PBS 
\begin_inset Foot
status open

\begin_layout Standard
PBS es un DRM que fue desarrollado a mediados los años '90 para manejar
 recursos de computo aeroespacial en la NASA.
\end_layout

\end_inset

 por lo que cuenta con un código base muy estable y sólido.
 Esto ayuda a mitigar los riesgos presentados por tecnologías emergentes
 que ofrecen funcionalidades innovadoras pero que también resultan problemáticas
 en un proyecto de corta duración.
 TORQUE y Maui son productos de relativamente pequeño tamaño, esto facilita
 su comprensión y por lo tanto su modificación y adaptación a necesidades
 particulares de investigación.
\end_layout

\begin_layout Standard
Si bien TORQUE brinda todas las funcionalidades necesarias para satisfacer
 los requerimientos del proyecto, también presenta ciertas carencias dentro
 de las cuales las más importantes son CPU harvesting y la migración de
 procesos.
 Dichas carencias no son un problema importante ya que el cluster cuenta
 con nodos homogéneos y dedicados, esto significa que los nodos del cluster
 tendrán capacidades de procesamiento muy similares y no serán compartidos
 con otras aplicaciones externas al cluster (p.
 ej.: aplicaciones de escritorio).
\end_layout

\begin_layout Standard
Como se mencionó en la sección de relevamiento de tecnologías, si bien TORQUE
 contiene la lógica necesaria para llevar a cabo la planificación de trabajos
 se trata de una lógica muy básica.
 Por esta razón se optó por incorporar a Maui para este proposito.
 Maui presenta un algoritmo de planificación con diversas características
 y configuraciones que nos permiten mejorar la performance del cluster y
 además brinda la posibilidad de implementar otro algoritmo de planificación
 desarrollado a medida.
\end_layout

\begin_layout Standard
Inicialmente se evaluó la herramienta Gold para llevar registro y contabilizar
 la utilización de recursos en clusters.
 Finalmente Gold fue dejado fuera del alcance del proyecto, pero mantenemos
 y recomendamos la utilización de Gold para trabajos futuros sobre el cluster.
\end_layout

\begin_layout Standard
Para la monitorización del sistema se decidió utilizar la herramienta Ganglia.
 Ganglia ya era utilizado como herramienta de monitorización por el grupo
 CeCal y luego de evaluar sus funcionalidades se optó por continuar con
 su utilización debido su excelente desepeño, su bajo consumo de recursos
 y sus reportes en tiempo real e históricos del uso del cluster.
\end_layout

\begin_layout Subsection
Desarrollo de la interfaz de acceso remoto
\end_layout

\begin_layout Standard
Hasta aquí las herramientas para construir la infraestructura del cluster,
 a continuación detallaremos el componente de acceso remoto al sistema Fenton.
 Un requerimiento importante es brindar una interfaz de usuario simple y
 de fácil acceso para usuarios no especializados, por esta razón y para
 evitar problemas con la posible heterogeneidad de los sistemas de los clientes
 se decidió brindar una interfaz de usuario Web para el acceso remoto al
 cluster.
\end_layout

\begin_layout Standard
El desarrollo del componente de acceso Web requirió la definición de varias
 herramientas: un servidor Web para alojar nuestra aplicación, un lenguaje
 server-side para implementar la lógica y un manejador de bases de datos
 relacionales para almacenar usuarios, trabajos y resultados de ejecuciones.
 La utilización de TORQUE y Maui para el manejo de recursos y la planificación
 de trabajos del cluster nos condiciona a trabajar sobre un sistema operativo
 Linux o Unix-BSD.
 Por esta razón se decidió utilizar Apache como servidor Web de la interfaz
 de usuario.
\end_layout

\begin_layout Standard
Teniendo en cuenta los conocimientos previos de los integrantes del grupo,
 así como la curva de aprendizaje de los diferentes lenguajes para desarrollar
 aplicaciones Web, se decidió utilizar PHP como lenguaje de implementación.
 El servidor Web Apache brinda un excelente soporte para la ejecución de
 código PHP por lo que resulta una pareja ideal.
 Como entorno de desarrollo para la implementación de la logica en código
 PHP necesaria se utilizó Eclipse con el plugin PHPEclipse.
 
\begin_inset Note Note
status open

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para el almacenamiento de datos se consideraron dos motores de base de datos
 relacional: PostgreSQL y MySQL.
 Finalmente elegimos trabajar con PostgreSQL, pero igualmente ambos cumplen
 con creces los requerimientos del proyecto.
 PostgreSQL es un motor de base de datos relacional de tipo empresarial,
 maduro, con buena integración con PHP y un muy buen soporte por parte de
 la comunidad.
 Si bien no es tan amigable ni tan popular como MySQL cuenta con una licencia
 de tipo BSD (Berkeley Software Distribution) mucho más flexible y permisiva
 que la licencia utilizada por MySQL.
\end_layout

\begin_layout Standard
Este requerimiento redundó en una ventaja para el producto: si fuera necesario
 instalarlo sobre otro motor de condiciones similares, en principio solo
 sería necesario reimplementar el módulo y repetir la etapa de testeo.
\end_layout

\begin_layout Standard
La apariencia del sitio también podía variar durante la implementación,
 por lo tanto además de separar la lógica de la aplicación de la capa de
 presentación, esta última se dividió en archivos .php que reciben los pedidos
 del usuario y actúan en consecuencia, separados de los archivos .html y
 .css orientados a la forma en que estos resultados se muestran.
 Para esto utilizamos plantillas que son cargadas en cada php para luego
 ser desplegadas en pantalla.
 En definitiva obtuvimos una versión moderada del patrón model view controller.
 Si en algún momento se deseara rediseñar el sitio manteniendo el funcionamiento
 del mismo, la mayor parte se puede cambiar desde la hoja de estilos y el
 resto desde las plantillas en formato .html.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
\begin_inset Graphics
	filename diagrama.gif
	scale 25

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A su vez separamos en módulos distintos las interfaces con Torque, Maui
 y el sistema operativo.
 Las interfaces de torque y Maui se utilizan para que el usuario administrador
 pueda sacar conclusiones sobre el estado del sistema y actuar en consecuencia.
 La interfaz con el sistema operativo se utiliza para guardar los proyectos
 del usuario final, ejecutar los procesos y realizar chequeos de espacio
 en disco, etc.
 A su vez el sistema operativo deberá interactuar con algunos scripts .php
 que se encargan del envío de alertas cuando alguno de los usuarios se excedió
 en el uso del disco.
 La manera más fácil de hacer esto es agregar la tarea al cron.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename C:/Documents and Settings/damian.cuarto/Escritorio/facultad/proyecto/cvs/Documentacion/esquema.gif

\end_inset


\end_layout

\begin_layout Standard
La aplicación permite un manejo de usuarios con perfiles diferenciados.
 Inicialmente podemos separar a los usuarios entre administradores y clientes
 finales, pero es posible ejercer diferencias más sutiles entre ellos.
 Para esto se diseñó un sistema de grupos de usuarios con funcionalidades
 asociadas, y así de esta manera podemos permitir a algunos usuarios acceder
 a algunas partes de la administración sin permitirles (por ejemplo) administrar
 los usuarios.
 Cada usuario puede pertenecer a uno o más grupos, y estos a su vez pueden
 tener funcionalidades y trabajos asociados.
 Un usuario determinado puede hacer uso de una funcionalidad dada si pertenece
 a algún grupo que se lo permita, mientras que puede acceder a un trabajo
 determinado si pertenece a algún grupo con acceso al mismo.
\end_layout

\begin_layout Standard
La interfaz de usuario varía notablemente según el perfil, si bien ambos
 usuarios tienen cierto conocimiento sobre el uso de aplicaciones, el cliente
 final no tiene por qué estar interiorizado con el funcionamiento del cluster,
 por lo tanto se le presenta el sistema como un todo.
 
\end_layout

\begin_layout Standard
Por otro lado el usuario administrador podrá desde su propia interfaz administra
r los recursos del cluster, conocer el estado de los nodos del cluster e
 interactuar con ellos para solucionar posibles problemas o mejorar su performan
ce.
 El usuario administrador tendrá a su cargo la tarea de mantener los usuarios
 y grupos del sistema así como el acceso de los mismos a los distintos trabajos.
 
\end_layout

\begin_layout Standard
Dado que nos encontramos en un ambiente multiusuario, la aplicación permite
 administrar las reservas del clúster, para organizar la utilización de
 recursos por varios usuarios de forma simultánea.
 Cada trabajo creado tendrá asociado un conjunto de recursos disponibles
 que determinarán el posterior funcionamiento de las ejecuciones de los
 clientes.
 Para esta implementación nos restringimos al uso de disco, tiempo máximo
 de ejecución y cantidad de nodos disponibles a la vez, pero es posible
 agregar recursos a restringir (memoria, ciclos de procesador, etc.).
\end_layout

\begin_layout Standard
El usuario final tendrá la posibilidad de subir su proyecto al cluster,
 compilarlo, ejecutarlo y ver la salida a pantalla en tiempo real.
 Dados los extensos tiempos de ejecución de los programas que se corren
 en clusters de estas características, el usuario puede abandonar el sitio
 para luego volver en otro momento y verificar el estado de la ejecución.
 Si el programa sigue en ejecución puede ver la salida a pantalla (nuevamente
 en tiempo real) junto con las salidas anteriores de la misma ejecución.
 Para los trabajos terminados existe la posibilidad de ver la salida en
 pantalla o descargarla en un archivo.
\end_layout

\begin_layout Standard
Los usuarios administradores cuentan con un conjunto de reportes estadísticos
 sobre los recursos del cluster como ser el porcentaje total de carga de
 CPU y memoria, se podrá verificar los tiempos de procesamiento de usuario
 y por proceso.
 Estos reportes brindan una gran ayuda en las tareas de administración de
 cluster.
 
\end_layout

\begin_layout Standard
La generación de los reportes estadísticos se realiza con información brindada
 por Torque, Maui y Ganglia; y es posible detallar la la información por
 nodo del cluster, usuario y proceso.
\end_layout

\begin_layout Standard
Por último se definió un mecanismo de alertas a los usuarios.
 Este permite enviar alertas a los diferentes usuarios del sistema, como
 ser inicio y finalización de trabajos, excesos de recursos del cluster,etc.
 Este mecanismo es totalmente extensible en cuanto a las definiciones de
 alertas y es soportado por funcionalidades de TORQUE y la base de datos.
 Los usuarios pueden observar las alertas en la interfaz web que le fueron
 enviadas por Fenton y esta abierta la posibilidad de enviárselas por mail
 si se define un servidor SMTP.
\end_layout

\begin_layout Subsection
Otras herramientas
\end_layout

\begin_layout Standard
En el transcurso del proyecto se necesito de otras herramientas para algunos
 tipos de tareas.
 Fue necesario contar con una herramienta colaborativa que nos permitiera
 compartir y versionar tanto el código como los documentos.
 Para esto decidimos utilizar Google Code, un servicio de Google que provee
 un servicio de alojamiento de proyectos.
 Algunas de las funcionalidades que ofrece Google Code son: control de versiones
 utilizando  Subversion
\begin_inset Foot
status open

\begin_layout Standard
Subversion es un software de control de versiones diseñado específicamente
 para reemplazar al popular CVS.
\end_layout

\end_inset

, un manejador de incidencias, una wiki, etcétera.
\end_layout

\begin_layout Standard
En lo que corresponde a la documentación del proyecto utilizamos LyX.
 Este es un programa gráfico  que permite la edición de texto usando LaTeX,
 por lo que hereda todas las capacidades de LaTeX (notación científica,
 edición de ecuaciones, creación de índices, etcétera) y por supuesto mantiene
 el enfoque WYSIWYM de LaTeX.
\end_layout

\begin_layout Subsection
Testeo de la solución
\end_layout

\begin_layout Standard
Una de las actividades de este proyecto fue el testeo de las tecnologías
 propuestas y el testeo de la interfaz web desarrollada.
 Los objetivos de esta etapa son la verificación y validación de los requerimien
tos funcionales establecidos en etapas más tempranas y que fueran objetivos
 del proyecto.
\end_layout

\begin_layout Standard
Durante el proceso de testing se aplicaron dos tipos de test.
 Se realizó un test funcional apoyado o complementado con un test exploratorio.
 El testing funcional verifica el cumplimiento de los requerimientos funcionales
 contra los casos de test, en un entorno que emula un ambiente de producción
 del sistema.
 El objetivo de este test es verificar si el comportamiento observado del
 software a prueba coincide o no con sus especificaciones.
 
\end_layout

\begin_layout Standard
El test exploratorio es un proceso simultáneo de exploración y aprendizaje
 del producto, diseño y ejecución de pruebas.
 La estrategia en este caso fue recorrer las funcionalidades de la interfaz
 en busca de defectos de diseño, de programación, de funcionamiento, etc.
\end_layout

\begin_layout Standard
Durante el test exploratorio se generaron una serie de casos de test que
 apuntan a cubrir los requerimientos funcionales principales del sistema.
 Estos casos de test se incluyeron en la Guía de Test (ver página 
\begin_inset LatexCommand pageref
reference "sub:Guía-de-testeo"

\end_inset

), pretendiendo guiar el testeo en posteriores ocasiones.
 El mismo incluye casos de test y escenarios de pruebas que integran los
 casos de test, así como una descripción del proceso ejecutado para esta
 oportunidad.
\end_layout

\begin_layout Standard
Las herramientas utilizadas en el testing fueron la guía de test y las funcional
idades provistas por el Google Code como son registro Issues y Wikis.
\end_layout

\end_body
\end_document
